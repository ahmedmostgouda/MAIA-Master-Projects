# -*- coding: utf-8 -*-
"""code_ants_v9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IU1CqEdLB_Ys0EV8PxlfdfEHT8aAgVov
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install https://github.com/ANTsX/ANTsPy/releases/download/v0.1.8/antspy-0.1.7-cp36-cp36m-linux_x86_64.whl

!pip install sklearn statsmodels

import os
import ants
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt

image_fixed_data.plot(overlay=image_moved_data, overlay_alpha=0.3, title='Before Registration'),

import nibabel as nib
import pandas as pd    

def load_img_points(name_img):
  training_scans = sorted(os.listdir(options['train']))
  input_train_fixed = {scan: [os.path.join(options['train'], scan, scan + '_eBHCT_pos.nii')]  for scan in training_scans}
  input_train_moved = {scan: [os.path.join(options['train'], scan, scan + '_iBHCT_pos.nii')]  for scan in training_scans}

  input_point_fixed = {scan: [os.path.join(options['train'], scan, scan + '_300_eBH_xyz_r1.txt')]  for scan in training_scans}
  input_point_moved = {scan: [os.path.join(options['train'], scan, scan + '_300_iBH_xyz_r1.txt')]  for scan in training_scans}

  for k in input_point_fixed:
    print(k)

    if name_img in k:
      image_fixed_data = nib.load(str(input_train_fixed[name_img])[2:-2])
      pixel_dim = image_fixed_data.header['pixdim'][1:4]
      image_fixed_data = ants.image_read(str(input_train_fixed[name_img])[2:-2])
      image_moved_data = ants.image_read(str(input_train_moved[name_img])[2:-2])
      points_fixed = np.loadtxt(str(input_point_fixed[name_img])[2:-2])*pixel_dim
      points_moved = np.loadtxt(str(input_point_moved[name_img])[2:-2])*pixel_dim

      points_moved = pd.DataFrame(points_moved)     
      points_moved.columns = ['x', 'y','z']
      points_fixed = pd.DataFrame(points_fixed)     
      points_fixed.columns = ['x', 'y','z']
  return image_fixed_data, image_moved_data, points_fixed, points_moved


#Target Registration Error
# CHALLENGE DAY: THEY WILL GIVE US THE MOVING POINTS.   
#1st registration Moving-to-Fixed 
#2nd transformation of moving points to generate the fixed ones.

### CHANGE THE REFERENCE_FIXED_POINT_LIST AND REFERENCE_MOVING_POINT_LIST TO MILIMETERS


def registration_errors(reference_fixed_point_list, reference_moving_point_list):
  """
  Distances between points transformed by the given transformation and their
  location in another coordinate system. When the points are only used to 
  evaluate registration accuracy (not used in the registration) this is the 
  Target Registration Error (TRE).
  
  Args:
      reference_fixed_point_list (list(tuple-like)): Points in fixed image 
                                                     cooredinate system.
      reference_moving_point_list (list(tuple-like)): Points in moving image 
                                                      cooredinate system.

      min_err, max_err (float): color range is linearly stretched between min_err 
                                and max_err. If these values are not given then
                                the range of errors computed from the data is used.

  Returns:
   (mean, std, min, max) (float, float, float, float, [float]): 
    TRE statistics and original TREs.
  """

  errors = [np.linalg.norm(np.array(reference_fixed_point_list) -  np.array(reference_moving_point_list),axis = 1)]
  min_errors = np.min(errors)
  max_errors = np.max(errors)


  return (np.mean(errors), np.std(errors), min_errors, max_errors, errors)

"""### REGISTRATION"""

import os
import ants
import numpy as np
path_folder = '/content/drive/My Drive/Colab Notebooks/MIRA_final_project/'

img_example = 'copd1'

options = {}

options["train"] = os.path.join(path_folder,'train/')


#load de images and the points
image_fixed_data, image_moved_data, points_fixed, points_moved = load_img_points(img_example)
mytx = ants.registration(fixed=image_fixed_data, moving=image_moved_data, type_of_transform='Affine')

"""### APPLY TRANSFORMATION TO POINTS"""

#warped_moving = ants.apply_transforms(fixed=image_fixed_data,
#                                      moving=image_moved_data,
#                                      transformlist=mytx['fwdtransforms'])

#warped_points = ants.apply_transforms_to_points(dim=3,
#                                                points=points_moved,
#                                                transformlist=mytx['fwdtransforms'])

#compute the error TRE
reference_fixed_point_list = points_fixed
reference_moving_point_list = points_moved
mean, std, min_error, max_error, errors= registration_errors(reference_fixed_point_list, reference_moving_point_list)
print(mean, std, min_error, max_error)

image_fixed_data.plot(overlay=image_moved_data, overlay_alpha=0.3, title='Before Registration'),
image_fixed_data.plot_ortho(overlay= image_moved_data, overlay_alpha=0.3, title='Ortho: before registration')

image_fixed_data.plot(overlay=mytx['warpedmovout'], overlay_alpha=0.3, title='after Registration'),
image_fixed_data.plot_ortho(overlay= mytx['warpedmovout'], overlay_alpha=0.3, title='Ortho: after registration')